#ifdef __has_include
    #if __has_include("lvgl.h")
        #ifndef LV_LVGL_H_INCLUDE_SIMPLE
            #define LV_LVGL_H_INCLUDE_SIMPLE
        #endif
    #endif
#endif

#if defined(LV_LVGL_H_INCLUDE_SIMPLE)
    #include "lvgl.h"
#else
    #include "lvgl/lvgl.h"
#endif


#ifndef LV_ATTRIBUTE_MEM_ALIGN
#define LV_ATTRIBUTE_MEM_ALIGN
#endif

#ifndef LV_ATTRIBUTE_IMG_RETURN_BTN
#define LV_ATTRIBUTE_IMG_RETURN_BTN
#endif

const LV_ATTRIBUTE_MEM_ALIGN LV_ATTRIBUTE_LARGE_CONST LV_ATTRIBUTE_IMG_RETURN_BTN uint8_t return_btn_map[] = {
  0xf2, 0xa1, 0x10, 0x4f, 	/*Color of index 0*/
  0xed, 0x9f, 0x0f, 0xbf, 	/*Color of index 1*/
  0x7d, 0x52, 0x04, 0xea, 	/*Color of index 2*/
  0x02, 0x01, 0x00, 0xfe, 	/*Color of index 3*/

  0x00, 0x55, 0x55, 0x55, 0x55, 0x55, 0x50, 0x00, 
  0x05, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x00, 
  0x15, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x40, 
  0x15, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x40, 
  0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x50, 
  0x55, 0x55, 0xa5, 0x55, 0x55, 0x55, 0x55, 0x50, 
  0x55, 0x56, 0xe5, 0x55, 0x55, 0x55, 0x55, 0x50, 
  0x55, 0x5b, 0xe5, 0x55, 0x55, 0x55, 0x55, 0x50, 
  0x55, 0x6f, 0xe5, 0x55, 0x55, 0x55, 0x55, 0x50, 
  0x55, 0xbf, 0xe9, 0x99, 0x99, 0x95, 0x55, 0x50, 
  0x56, 0xff, 0xff, 0xff, 0xff, 0xfd, 0x55, 0x50, 
  0x55, 0xff, 0xea, 0xaa, 0xaa, 0xbf, 0x95, 0x50, 
  0x55, 0x6f, 0xe5, 0x55, 0x55, 0x5b, 0xe5, 0x50, 
  0x55, 0x5f, 0xe5, 0x55, 0x55, 0x55, 0xf5, 0x50, 
  0x55, 0x56, 0xe5, 0x55, 0x55, 0x55, 0xb9, 0x50, 
  0x55, 0x55, 0xe5, 0x55, 0x55, 0x55, 0xb9, 0x50, 
  0x55, 0x55, 0x65, 0x55, 0x55, 0x55, 0x7d, 0x50, 
  0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0xb9, 0x50, 
  0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0xb9, 0x50, 
  0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0xf5, 0x50, 
  0x55, 0x55, 0x55, 0x55, 0x55, 0x57, 0xe5, 0x50, 
  0x55, 0x59, 0x59, 0x5a, 0x56, 0xaf, 0x95, 0x50, 
  0x55, 0x6e, 0x6e, 0x5f, 0x5b, 0xfe, 0x55, 0x50, 
  0x55, 0x69, 0x5a, 0x5a, 0x5a, 0xa5, 0x55, 0x50, 
  0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x50, 
  0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x50, 
  0x15, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x40, 
  0x15, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x40, 
  0x05, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x00, 
  0x00, 0x55, 0x55, 0x55, 0x55, 0x55, 0x50, 0x00, 
};

/*
const lv_img_dsc_t return_btn = {
  .header.cf = LV_IMG_CF_INDEXED_2BIT,
  .header.always_zero = 0,
  .header.reserved = 0,
  .header.w = 30,
  .header.h = 30,
  .data_size = 256,
  .data = return_btn_map,
};
*/

const lv_img_dsc_t return_btn = {
#if LV_BIG_ENDIAN_SYSTEM
  { 30, 30, 0, 0, LV_IMG_CF_INDEXED_2BIT, },
#else
  { LV_IMG_CF_INDEXED_2BIT, 0, 0, 30, 30, },
#endif
  256, return_btn_map,
};

// eof

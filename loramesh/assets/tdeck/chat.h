#ifdef __has_include
    #if __has_include("lvgl.h")
        #ifndef LV_LVGL_H_INCLUDE_SIMPLE
            #define LV_LVGL_H_INCLUDE_SIMPLE
        #endif
    #endif
#endif

#if defined(LV_LVGL_H_INCLUDE_SIMPLE)
    #include "lvgl.h"
#else
    #include "lvgl/lvgl.h"
#endif


#ifndef LV_ATTRIBUTE_MEM_ALIGN
#define LV_ATTRIBUTE_MEM_ALIGN
#endif

#ifndef LV_ATTRIBUTE_IMG_CHAT
#define LV_ATTRIBUTE_IMG_CHAT
#endif

const LV_ATTRIBUTE_MEM_ALIGN LV_ATTRIBUTE_LARGE_CONST LV_ATTRIBUTE_IMG_CHAT uint8_t chat_map[] = {
  0x00, 0x00, 0x00, 0x00, 	/*Color of index 0*/
  0x00, 0x00, 0x00, 0x3a, 	/*Color of index 1*/
  0x00, 0x00, 0x00, 0x97, 	/*Color of index 2*/
  0x00, 0x00, 0x00, 0xf4, 	/*Color of index 3*/

  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x06, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x1f, 0xea, 0xaa, 0xaa, 0xaa, 0xaa, 0xab, 0xf4, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb8, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x78, 0x05, 0x55, 0x55, 0x50, 0x00, 0x00, 0x3c, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x78, 0x1f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x3c, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x78, 0x0a, 0xaa, 0xaa, 0xa0, 0x00, 0x00, 0x3c, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x78, 0x0b, 0xbb, 0xbb, 0xbb, 0xbb, 0xa0, 0x3c, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x78, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x3c, 0x00, 0x00, 
  0x00, 0x00, 0xaa, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 
  0x00, 0x03, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 
  0x00, 0x0b, 0x95, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 
  0x00, 0x0b, 0x40, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 
  0x00, 0x0b, 0x40, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb8, 0x00, 0x00, 
  0x00, 0x0b, 0x40, 0x1f, 0xaa, 0xaa, 0x98, 0x00, 0x06, 0xaa, 0xf0, 0x00, 0x00, 
  0x00, 0x0b, 0x40, 0x07, 0xff, 0xff, 0xff, 0x00, 0x1f, 0xff, 0xd0, 0x00, 0x00, 
  0x00, 0x0b, 0x40, 0x00, 0x55, 0x56, 0xeb, 0xc0, 0x1e, 0x55, 0x00, 0x00, 0x00, 
  0x00, 0x0b, 0x40, 0x00, 0x00, 0x01, 0xe2, 0xf0, 0x2d, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x0b, 0x40, 0x00, 0x00, 0x01, 0xe0, 0xb8, 0x3c, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x0b, 0x40, 0x00, 0x00, 0x01, 0xe0, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x0b, 0x40, 0x00, 0x00, 0x01, 0xe0, 0x0f, 0xf8, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x0b, 0x95, 0x00, 0x15, 0x56, 0xe0, 0x03, 0xf4, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x07, 0xff, 0x81, 0xff, 0xff, 0xc0, 0x01, 0xf4, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0xab, 0x87, 0xea, 0xaa, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x03, 0xdf, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x02, 0xfd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x02, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

/*
const lv_img_dsc_t chat = {
  .header.cf = LV_IMG_CF_INDEXED_2BIT,
  .header.always_zero = 0,
  .header.reserved = 0,
  .header.w = 50,
  .header.h = 40,
  .data_size = 536,
  .data = chat_map,
};
*/

const lv_img_dsc_t chat = {
#if LV_BIG_ENDIAN_SYSTEM
  { 40, 50, 0, 0, LV_IMG_CF_INDEXED_2BIT, },
#else
  { LV_IMG_CF_INDEXED_2BIT, 0, 0, 50, 40, },
#endif
  536, chat_map,
};

// eof
